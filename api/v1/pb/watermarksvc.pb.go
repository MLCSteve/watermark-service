// Code generated by protoc-gen-go. DO NOT EDIT.
// source: watermarksvc.proto

/*
Package pb is a generated protocol buffer package.

It is generated from these files:
	watermarksvc.proto

It has these top-level messages:
	Document
	GetRequest
	GetReply
	StatusRequest
	StatusReply
	WatermarkRequest
	WatermarkReply
	AddDocumentRequest
	AddDocumentReply
	ServiceStatusRequest
	ServiceStatusReply
*/
package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type StatusReply_Status int32

const (
	StatusReply_PENDING     StatusReply_Status = 0
	StatusReply_STARTED     StatusReply_Status = 1
	StatusReply_IN_PROGRESS StatusReply_Status = 2
	StatusReply_FINISHED    StatusReply_Status = 3
	StatusReply_FAILED      StatusReply_Status = 4
)

var StatusReply_Status_name = map[int32]string{
	0: "PENDING",
	1: "STARTED",
	2: "IN_PROGRESS",
	3: "FINISHED",
	4: "FAILED",
}
var StatusReply_Status_value = map[string]int32{
	"PENDING":     0,
	"STARTED":     1,
	"IN_PROGRESS": 2,
	"FINISHED":    3,
	"FAILED":      4,
}

func (x StatusReply_Status) String() string {
	return proto.EnumName(StatusReply_Status_name, int32(x))
}
func (StatusReply_Status) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{4, 0} }

type Document struct {
	Content   string `protobuf:"bytes,1,opt,name=content" json:"content,omitempty"`
	Title     string `protobuf:"bytes,2,opt,name=title" json:"title,omitempty"`
	Author    string `protobuf:"bytes,3,opt,name=author" json:"author,omitempty"`
	Topic     string `protobuf:"bytes,4,opt,name=topic" json:"topic,omitempty"`
	Watermark string `protobuf:"bytes,5,opt,name=watermark" json:"watermark,omitempty"`
}

func (m *Document) Reset()                    { *m = Document{} }
func (m *Document) String() string            { return proto.CompactTextString(m) }
func (*Document) ProtoMessage()               {}
func (*Document) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Document) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

func (m *Document) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *Document) GetAuthor() string {
	if m != nil {
		return m.Author
	}
	return ""
}

func (m *Document) GetTopic() string {
	if m != nil {
		return m.Topic
	}
	return ""
}

func (m *Document) GetWatermark() string {
	if m != nil {
		return m.Watermark
	}
	return ""
}

type GetRequest struct {
	Filters []*GetRequest_Filters `protobuf:"bytes,1,rep,name=filters" json:"filters,omitempty"`
}

func (m *GetRequest) Reset()                    { *m = GetRequest{} }
func (m *GetRequest) String() string            { return proto.CompactTextString(m) }
func (*GetRequest) ProtoMessage()               {}
func (*GetRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *GetRequest) GetFilters() []*GetRequest_Filters {
	if m != nil {
		return m.Filters
	}
	return nil
}

type GetRequest_Filters struct {
	Key   string `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
}

func (m *GetRequest_Filters) Reset()                    { *m = GetRequest_Filters{} }
func (m *GetRequest_Filters) String() string            { return proto.CompactTextString(m) }
func (*GetRequest_Filters) ProtoMessage()               {}
func (*GetRequest_Filters) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1, 0} }

func (m *GetRequest_Filters) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *GetRequest_Filters) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type GetReply struct {
	Documents []*Document `protobuf:"bytes,1,rep,name=documents" json:"documents,omitempty"`
}

func (m *GetReply) Reset()                    { *m = GetReply{} }
func (m *GetReply) String() string            { return proto.CompactTextString(m) }
func (*GetReply) ProtoMessage()               {}
func (*GetReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *GetReply) GetDocuments() []*Document {
	if m != nil {
		return m.Documents
	}
	return nil
}

type StatusRequest struct {
	TicketID string `protobuf:"bytes,1,opt,name=ticketID" json:"ticketID,omitempty"`
}

func (m *StatusRequest) Reset()                    { *m = StatusRequest{} }
func (m *StatusRequest) String() string            { return proto.CompactTextString(m) }
func (*StatusRequest) ProtoMessage()               {}
func (*StatusRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *StatusRequest) GetTicketID() string {
	if m != nil {
		return m.TicketID
	}
	return ""
}

type StatusReply struct {
	Status StatusReply_Status `protobuf:"varint,1,opt,name=status,enum=pb.StatusReply_Status" json:"status,omitempty"`
	Err    string             `protobuf:"bytes,2,opt,name=Err,json=err" json:"Err,omitempty"`
}

func (m *StatusReply) Reset()                    { *m = StatusReply{} }
func (m *StatusReply) String() string            { return proto.CompactTextString(m) }
func (*StatusReply) ProtoMessage()               {}
func (*StatusReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *StatusReply) GetStatus() StatusReply_Status {
	if m != nil {
		return m.Status
	}
	return StatusReply_PENDING
}

func (m *StatusReply) GetErr() string {
	if m != nil {
		return m.Err
	}
	return ""
}

type WatermarkRequest struct {
	TicketID string `protobuf:"bytes,1,opt,name=ticketID" json:"ticketID,omitempty"`
	Mark     string `protobuf:"bytes,2,opt,name=mark" json:"mark,omitempty"`
}

func (m *WatermarkRequest) Reset()                    { *m = WatermarkRequest{} }
func (m *WatermarkRequest) String() string            { return proto.CompactTextString(m) }
func (*WatermarkRequest) ProtoMessage()               {}
func (*WatermarkRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *WatermarkRequest) GetTicketID() string {
	if m != nil {
		return m.TicketID
	}
	return ""
}

func (m *WatermarkRequest) GetMark() string {
	if m != nil {
		return m.Mark
	}
	return ""
}

type WatermarkReply struct {
	Code int64  `protobuf:"varint,1,opt,name=code" json:"code,omitempty"`
	Err  string `protobuf:"bytes,2,opt,name=err" json:"err,omitempty"`
}

func (m *WatermarkReply) Reset()                    { *m = WatermarkReply{} }
func (m *WatermarkReply) String() string            { return proto.CompactTextString(m) }
func (*WatermarkReply) ProtoMessage()               {}
func (*WatermarkReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *WatermarkReply) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *WatermarkReply) GetErr() string {
	if m != nil {
		return m.Err
	}
	return ""
}

type AddDocumentRequest struct {
	Document *Document `protobuf:"bytes,1,opt,name=document" json:"document,omitempty"`
}

func (m *AddDocumentRequest) Reset()                    { *m = AddDocumentRequest{} }
func (m *AddDocumentRequest) String() string            { return proto.CompactTextString(m) }
func (*AddDocumentRequest) ProtoMessage()               {}
func (*AddDocumentRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *AddDocumentRequest) GetDocument() *Document {
	if m != nil {
		return m.Document
	}
	return nil
}

type AddDocumentReply struct {
	TicketID string `protobuf:"bytes,1,opt,name=ticketID" json:"ticketID,omitempty"`
	Mark     string `protobuf:"bytes,2,opt,name=mark" json:"mark,omitempty"`
}

func (m *AddDocumentReply) Reset()                    { *m = AddDocumentReply{} }
func (m *AddDocumentReply) String() string            { return proto.CompactTextString(m) }
func (*AddDocumentReply) ProtoMessage()               {}
func (*AddDocumentReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *AddDocumentReply) GetTicketID() string {
	if m != nil {
		return m.TicketID
	}
	return ""
}

func (m *AddDocumentReply) GetMark() string {
	if m != nil {
		return m.Mark
	}
	return ""
}

type ServiceStatusRequest struct {
}

func (m *ServiceStatusRequest) Reset()                    { *m = ServiceStatusRequest{} }
func (m *ServiceStatusRequest) String() string            { return proto.CompactTextString(m) }
func (*ServiceStatusRequest) ProtoMessage()               {}
func (*ServiceStatusRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

type ServiceStatusReply struct {
	Code int64  `protobuf:"varint,1,opt,name=code" json:"code,omitempty"`
	Err  string `protobuf:"bytes,2,opt,name=err" json:"err,omitempty"`
}

func (m *ServiceStatusReply) Reset()                    { *m = ServiceStatusReply{} }
func (m *ServiceStatusReply) String() string            { return proto.CompactTextString(m) }
func (*ServiceStatusReply) ProtoMessage()               {}
func (*ServiceStatusReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *ServiceStatusReply) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *ServiceStatusReply) GetErr() string {
	if m != nil {
		return m.Err
	}
	return ""
}

func init() {
	proto.RegisterType((*Document)(nil), "pb.Document")
	proto.RegisterType((*GetRequest)(nil), "pb.GetRequest")
	proto.RegisterType((*GetRequest_Filters)(nil), "pb.GetRequest.Filters")
	proto.RegisterType((*GetReply)(nil), "pb.GetReply")
	proto.RegisterType((*StatusRequest)(nil), "pb.StatusRequest")
	proto.RegisterType((*StatusReply)(nil), "pb.StatusReply")
	proto.RegisterType((*WatermarkRequest)(nil), "pb.WatermarkRequest")
	proto.RegisterType((*WatermarkReply)(nil), "pb.WatermarkReply")
	proto.RegisterType((*AddDocumentRequest)(nil), "pb.AddDocumentRequest")
	proto.RegisterType((*AddDocumentReply)(nil), "pb.AddDocumentReply")
	proto.RegisterType((*ServiceStatusRequest)(nil), "pb.ServiceStatusRequest")
	proto.RegisterType((*ServiceStatusReply)(nil), "pb.ServiceStatusReply")
	proto.RegisterEnum("pb.StatusReply_Status", StatusReply_Status_name, StatusReply_Status_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Watermark service

type WatermarkClient interface {
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetReply, error)
	Watermark(ctx context.Context, in *WatermarkRequest, opts ...grpc.CallOption) (*WatermarkReply, error)
	Status(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*StatusReply, error)
	AddDocument(ctx context.Context, in *AddDocumentRequest, opts ...grpc.CallOption) (*AddDocumentReply, error)
	ServiceStatus(ctx context.Context, in *ServiceStatusRequest, opts ...grpc.CallOption) (*ServiceStatusReply, error)
}

type watermarkClient struct {
	cc *grpc.ClientConn
}

func NewWatermarkClient(cc *grpc.ClientConn) WatermarkClient {
	return &watermarkClient{cc}
}

func (c *watermarkClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetReply, error) {
	out := new(GetReply)
	err := grpc.Invoke(ctx, "/pb.Watermark/Get", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *watermarkClient) Watermark(ctx context.Context, in *WatermarkRequest, opts ...grpc.CallOption) (*WatermarkReply, error) {
	out := new(WatermarkReply)
	err := grpc.Invoke(ctx, "/pb.Watermark/Watermark", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *watermarkClient) Status(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*StatusReply, error) {
	out := new(StatusReply)
	err := grpc.Invoke(ctx, "/pb.Watermark/Status", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *watermarkClient) AddDocument(ctx context.Context, in *AddDocumentRequest, opts ...grpc.CallOption) (*AddDocumentReply, error) {
	out := new(AddDocumentReply)
	err := grpc.Invoke(ctx, "/pb.Watermark/AddDocument", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *watermarkClient) ServiceStatus(ctx context.Context, in *ServiceStatusRequest, opts ...grpc.CallOption) (*ServiceStatusReply, error) {
	out := new(ServiceStatusReply)
	err := grpc.Invoke(ctx, "/pb.Watermark/ServiceStatus", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Watermark service

type WatermarkServer interface {
	Get(context.Context, *GetRequest) (*GetReply, error)
	Watermark(context.Context, *WatermarkRequest) (*WatermarkReply, error)
	Status(context.Context, *StatusRequest) (*StatusReply, error)
	AddDocument(context.Context, *AddDocumentRequest) (*AddDocumentReply, error)
	ServiceStatus(context.Context, *ServiceStatusRequest) (*ServiceStatusReply, error)
}

func RegisterWatermarkServer(s *grpc.Server, srv WatermarkServer) {
	s.RegisterService(&_Watermark_serviceDesc, srv)
}

func _Watermark_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WatermarkServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Watermark/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WatermarkServer).Get(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Watermark_Watermark_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WatermarkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WatermarkServer).Watermark(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Watermark/Watermark",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WatermarkServer).Watermark(ctx, req.(*WatermarkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Watermark_Status_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WatermarkServer).Status(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Watermark/Status",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WatermarkServer).Status(ctx, req.(*StatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Watermark_AddDocument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddDocumentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WatermarkServer).AddDocument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Watermark/AddDocument",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WatermarkServer).AddDocument(ctx, req.(*AddDocumentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Watermark_ServiceStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServiceStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WatermarkServer).ServiceStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Watermark/ServiceStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WatermarkServer).ServiceStatus(ctx, req.(*ServiceStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Watermark_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Watermark",
	HandlerType: (*WatermarkServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _Watermark_Get_Handler,
		},
		{
			MethodName: "Watermark",
			Handler:    _Watermark_Watermark_Handler,
		},
		{
			MethodName: "Status",
			Handler:    _Watermark_Status_Handler,
		},
		{
			MethodName: "AddDocument",
			Handler:    _Watermark_AddDocument_Handler,
		},
		{
			MethodName: "ServiceStatus",
			Handler:    _Watermark_ServiceStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "watermarksvc.proto",
}

func init() { proto.RegisterFile("watermarksvc.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 530 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x54, 0x5d, 0x8b, 0xd3, 0x50,
	0x10, 0xdd, 0x34, 0xdd, 0x7e, 0x4c, 0xbb, 0xdd, 0x38, 0x94, 0x12, 0x82, 0x0f, 0xcb, 0x05, 0xa1,
	0x28, 0x04, 0x5d, 0x61, 0x05, 0x41, 0xa1, 0x9a, 0xb4, 0x06, 0xb4, 0x2e, 0xc9, 0x82, 0x8f, 0xd2,
	0xa6, 0x57, 0x0c, 0xcd, 0x36, 0xd9, 0x9b, 0x9b, 0x4a, 0xff, 0x80, 0x3f, 0x43, 0xff, 0xaa, 0xdc,
	0x9b, 0x8f, 0x26, 0xd9, 0x7d, 0x58, 0xdf, 0xee, 0x99, 0x39, 0x93, 0x99, 0x73, 0x66, 0x08, 0xe0,
	0xaf, 0x15, 0xa7, 0xec, 0x76, 0xc5, 0xb6, 0xc9, 0xde, 0x37, 0x63, 0x16, 0xf1, 0x08, 0x5b, 0xf1,
	0x9a, 0xfc, 0x56, 0xa0, 0x67, 0x45, 0x7e, 0x7a, 0x4b, 0x77, 0x1c, 0x75, 0xe8, 0xfa, 0xd1, 0x8e,
	0xd3, 0x1d, 0xd7, 0x95, 0x0b, 0x65, 0xda, 0x77, 0x0b, 0x88, 0x63, 0x38, 0xe5, 0x01, 0x0f, 0xa9,
	0xde, 0x92, 0xf1, 0x0c, 0xe0, 0x04, 0x3a, 0xab, 0x94, 0xff, 0x8c, 0x98, 0xae, 0xca, 0x70, 0x8e,
	0x24, 0x3b, 0x8a, 0x03, 0x5f, 0x6f, 0xe7, 0x6c, 0x01, 0xf0, 0x29, 0xf4, 0xcb, 0x21, 0xf4, 0x53,
	0x99, 0x39, 0x06, 0xc8, 0x1d, 0xc0, 0x82, 0x72, 0x97, 0xde, 0xa5, 0x34, 0xe1, 0xf8, 0x12, 0xba,
	0x3f, 0x82, 0x90, 0x53, 0x96, 0xe8, 0xca, 0x85, 0x3a, 0x1d, 0x5c, 0x4e, 0xcc, 0x78, 0x6d, 0x1e,
	0x09, 0xe6, 0x3c, 0xcb, 0xba, 0x05, 0xcd, 0x78, 0x05, 0xdd, 0x3c, 0x86, 0x1a, 0xa8, 0x5b, 0x7a,
	0xc8, 0x25, 0x88, 0xa7, 0x18, 0x68, 0xbf, 0x0a, 0xd3, 0x72, 0x7c, 0x09, 0xc8, 0x15, 0xf4, 0xe4,
	0x17, 0xe3, 0xf0, 0x80, 0xcf, 0xa1, 0xbf, 0xc9, 0x6d, 0x28, 0x5a, 0x0e, 0x45, 0xcb, 0xc2, 0x1b,
	0xf7, 0x98, 0x26, 0x2f, 0xe0, 0xcc, 0xe3, 0x2b, 0x9e, 0x26, 0xc5, 0xb4, 0x06, 0xf4, 0x78, 0xe0,
	0x6f, 0x29, 0x77, 0xac, 0xbc, 0x6b, 0x89, 0xc9, 0x1f, 0x05, 0x06, 0x05, 0x5b, 0x34, 0x32, 0xa1,
	0x93, 0x48, 0x28, 0x99, 0xa3, 0x4c, 0x58, 0x85, 0x50, 0xbc, 0x73, 0x96, 0x10, 0x63, 0x33, 0x96,
	0x0f, 0xae, 0x52, 0xc6, 0xc8, 0x17, 0xe8, 0x64, 0x1c, 0x1c, 0x40, 0xf7, 0xda, 0x5e, 0x5a, 0xce,
	0x72, 0xa1, 0x9d, 0x08, 0xe0, 0xdd, 0xcc, 0xdc, 0x1b, 0xdb, 0xd2, 0x14, 0x3c, 0x87, 0x81, 0xb3,
	0xfc, 0x7e, 0xed, 0x7e, 0x5d, 0xb8, 0xb6, 0xe7, 0x69, 0x2d, 0x1c, 0x42, 0x6f, 0xee, 0x2c, 0x1d,
	0xef, 0x93, 0x6d, 0x69, 0x2a, 0x02, 0x74, 0xe6, 0x33, 0xe7, 0xb3, 0x6d, 0x69, 0x6d, 0xf2, 0x01,
	0xb4, 0x6f, 0xc5, 0x16, 0x1e, 0x21, 0x08, 0x11, 0xda, 0x72, 0x83, 0xd9, 0x44, 0xf2, 0x4d, 0xae,
	0x60, 0x54, 0xf9, 0x86, 0x90, 0x89, 0xd0, 0xf6, 0xa3, 0x0d, 0x95, 0xd5, 0xaa, 0x2b, 0xdf, 0x42,
	0x0a, 0xad, 0x4b, 0x79, 0x0f, 0x38, 0xdb, 0x6c, 0x4a, 0x8f, 0xf3, 0xee, 0x53, 0xe8, 0x15, 0x66,
	0xcb, 0xfa, 0xe6, 0x2a, 0xca, 0xac, 0x98, 0xbd, 0x56, 0x2f, 0x3a, 0xff, 0xef, 0xec, 0x13, 0x18,
	0x7b, 0x94, 0xed, 0x03, 0x9f, 0xd6, 0x96, 0x4a, 0xde, 0x02, 0x36, 0xe2, 0x8f, 0xd6, 0x75, 0xf9,
	0xb7, 0x05, 0xfd, 0xd2, 0x10, 0x7c, 0x06, 0xea, 0x82, 0x72, 0x1c, 0xd5, 0x4f, 0xd8, 0x18, 0x96,
	0x38, 0x0e, 0x0f, 0xe4, 0x04, 0xdf, 0x54, 0x6b, 0xc6, 0x22, 0xd9, 0xdc, 0x8b, 0x81, 0x8d, 0x68,
	0x56, 0x68, 0x96, 0x07, 0xf1, 0xa4, 0x7a, 0x4c, 0x59, 0xc9, 0x79, 0xe3, 0xbe, 0xc8, 0x09, 0xbe,
	0x83, 0x41, 0xc5, 0x35, 0x94, 0x17, 0x78, 0x7f, 0x0d, 0xc6, 0xf8, 0x5e, 0x3c, 0x2b, 0xff, 0x08,
	0x67, 0x35, 0x63, 0x50, 0x97, 0x2d, 0x1e, 0xf0, 0xd0, 0x98, 0x3c, 0x90, 0x91, 0x1f, 0x59, 0x77,
	0xe4, 0x2f, 0xe8, 0xf5, 0xbf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x80, 0x34, 0x6f, 0xc4, 0x98, 0x04,
	0x00, 0x00,
}
